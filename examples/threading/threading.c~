#include "threading.h"
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

// Optional: use these functions to add debug or error prints to your application
//#define DEBUG_LOG(msg,...)
#define DEBUG_LOG(msg,...) printf("threading: " msg "\n" , ##__VA_ARGS__)
#define ERROR_LOG(msg,...) printf("threading ERROR: " msg "\n" , ##__VA_ARGS__)

void* threadfunc(void* thread_param)
{
    struct thread_data* thread_func_args = (struct thread_data *) thread_param;
    thread_func_args->thread_complete_success = false;
    
    // TODO: wait, obtain mutex, wait, release mutex as described by thread_data structure
    // hint: use a cast like the one below to obtain thread arguments from your parameter
    //struct thread_data* thread_func_args = (struct thread_data *) thread_param;
    DEBUG_LOG("thread_started");    
    sleep(thread_func_args->wait_to_obtain_ms);
    DEBUG_LOG("lock_mutex");    
    int rc = pthread_mutex_lock( thread_func_args->mutex);
    if ( 0 != rc ) {
      ERROR_LOG("threadfunc:pthread_mutex_lock FAILED");
    } else {
      sleep(thread_func_args->wait_to_release_ms);
      DEBUG_LOG("unlock_mutex");          
      rc = pthread_mutex_unlock( thread_func_args->mutex);
      if (0 != rc) {
        ERROR_LOG("threadfunc:pthread_unmutex_lock FAILED");
      }
    }  

    thread_func_args->thread_complete_success = true;

    return thread_param;
}

bool start_thread_obtaining_mutex(pthread_t *thread, pthread_mutex_t *mutex, int wait_to_obtain_ms, int wait_to_release_ms)
{
     struct thread_data 	*thread_func_args;
    /**
     * TODO: allocate memory for thread_data, setup mutex and wait arguments, pass thread_data to created thread
     * using threadfunc() as entry point.
     *
     * return true if successful.
     *
     * See implementation details in threading.h file comment block
     */
    printf("wait_ms is %i", wait_to_obtain_ms);     
     /* allocate memory for thread_func_args*/
     DEBUG_LOG("allocate memory for thread_func_args");
     thread_func_args = malloc(sizeof(*thread_func_args));
     
     /* setup mutex and wait arguments */
     DEBUG_LOG("setup mutex and wait arguments");
     int rc = pthread_mutex_init( mutex, NULL);
     if (0!=rc) {
       ERROR_LOG("pthread_mutex_init FAILED");
       return (false);
     } else {
       thread_func_args->wait_to_obtain_ms = wait_to_obtain_ms;
printf("wait_to_obtain is %i %i\n", wait_to_obtain_ms, thread_func_args->wait_to_obtain_ms);
       thread_func_args->wait_to_release_ms = wait_to_release_ms;
       thread_func_args->mutex = mutex;
     
       /* create thread and pass data */
       DEBUG_LOG("create thread");
       rc = pthread_create( thread, NULL, &threadfunc, thread_func_args);
       DEBUG_LOG("create thread returned: %i, we return: %b", rc, !(bool) rc);
       return (!(bool) rc);
     }

}

